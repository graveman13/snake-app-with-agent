---
alwaysApply: true
---
## Snake Game на React + Vite - Правила розробки

### Загальний дизайн

@src/assets/snake-game-digital-snakes-mobile-260nw-2511145875.webp

### Загальні принципи архітектури
- Розділяй ігрову логіку та UI компоненти - логіка гри має бути незалежною від React
- Використовуй immutable підходи для стану гри - завжди повертай новий стан замість мутації
- Створюй окремі типи для всіх ігрових сутностей (Snake, Food, GameState, Direction)
- Всі ігрові обчислення виконуй у чистих функціях без побічних ефектів

### Структура типів для Snake Game
- Створи строго типізовані інтерфейси: Position, Snake, Food, GameState, Direction
- Використовуй enum для напрямків руху та статусів гри
- Визначай явні типи для розмірів ігрового поля та швидкості

### Управління станом гри
- Використовуй useReducer для складного стану гри замість множинних useState
- Винеси reducer логіку в окремі файли поза компонентами
- Всі зміни стану гри мають бути предиктивними та відтворюваними

### Ігровий цикл та анімація
- Використовуй useCallback для всіх функцій ігрового циклу для оптимізації ре-рендерів
- Застосовуй requestAnimationFrame для плавної анімації замість setInterval
- Винеси логіку руху змійки, перевірки колізій та генерації їжі в окремі утиліти

### Performance для ігор
- Мемоізуй компоненти ігрового поля з React.memo
- Використовуй useMemo для обчислення позицій та колізій
- Уникай створення нових об'єктів в render циклі

### Обробка подій та контролів
- Створи єдиний обробник клавіатури з маппінгом клавіш на actions
- Використовуй debounce для швидких натискань клавіш
- Валідуй input - заборони протилежний рух (наприклад, вліво коли рухаєшся вправо)

### Рендеринг гри
- Розглянь Canvas API для кращої performance замість DOM елементів при великих розмірах поля
- Якщо використовуєш DOM - створи компоненти Cell, Snake, Food з чіткою відповідальністю
- Оптимізуй ре-рендери - оновлюй тільки змінені частини ігрового поля

### Конфігурація та константи
- Винеси всі ігрові константи (розмір поля, швидкість, кольори) у config файл
- Створи TypeScript константи з as const для незмінності
- Групуй налаштування за логічними блоками (gameplay, visual, controls)

### Утиліти та чисті функції
- Функції генерації нової позиції їжі - чисті, без side effects
- Функції перевірки колізій - повертають boolean, не змінюють стан
- Функції обчислення наступної позиції змійки - приймають поточний стан, повертають новий

### TypeScript специфіка для гри
- Використовуй union types для станів гри: 'playing' | 'paused' | 'gameOver' | 'ready'
- Створи mapped types для конфігурації якщо потрібні варіанти складності
- Застосовуй generic типи для функцій що працюють з координатами

### Налагодження та тестування
- Додай console.log обгортки для критичних ігрових подій (з умовними exports)
- Створи mock функції для тестування ігрової логіки
- Валідуй стан гри на кожному кроці у development режимі

### React + Vite специфіка
- Використовуй Vite HMR для швидкої розробки - структуруй код щоб зміни не перезапускали гру
- Застосовуй dynamic imports для великих утиліт якщо потрібно
- Налаштуй Vite proxy якщо планується multiplayer функціонал

### Код стиль для ігрових компонентів
- Префіксуй ігрові компоненти (GameBoard, GameCell, GameUI)
- Використовуй дескриптивні імена для ігрових функцій (moveSnake, checkCollision, generateFood)
- Групуй експорти - спочатку типи, потім функції, потім компоненти

### Обробка помилок в грі
- Передбач fallback для некоректних станів гри
- Логуй критичні помилки що можуть зламати ігровий процес
- Створи reset функцію для відновлення гри після критичних помилок